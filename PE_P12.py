######################################################################################################################
# Project Euler
# Problem 12
# File name: PE_P12.py
# Compile: python PE_P12.py
# Programer: Alexis Lopez
# Description: The sequence of triangle numbers is generated by adding the natural numbers. 
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#       1: 1
#       3: 1,3
#       6: 1,2,3,6
#       10: 1,2,5,10
#       15: 1,3,5,15
#       21: 1,3,7,21
#       28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?
######################################################################################################################
import math

print(r"Welcome to 'Project Euler' This is problem #12")

# Computing square of the sum of natural numbers
def tringularNumbers(divisors):

    # Defining the first triangular number in a list
    triangle = []
    sum = 1
    triangleNumber = 0
    
    while True:
    
        # Generating triangular numbers
        triangleNumber += sum 
        triangle.append(triangleNumber)
        
        #print(triangleNumber)
        if(primeFactorization(triangleNumber) > divisors):
            # Returning the triangle number that meets the divisors criteria
            return triangleNumber
        
        # To add the next natural number to find the triangular number
        sum += 1

# Finds the number of divisor a number have.    
def primeFactorization(number):
    
    # Initializing our variables
    oldNumber = number
    
    # Using equation (p+1)(q+1)...(r+1) = number of divisors where p,q,..r exponents on primes
    numberDivisors = 0
    loopForTwo = 0
    loopForOthers = 0
    
    # Finding how many times it divides by 2
    while (number % 2 == 0):
        number /= 2
        loopForTwo += 1

    # Adding to number of divisors
    numberDivisors += loopForTwo + 1
    
    # Finding how many times a prime divides the number
    for i in range (3, oldNumber // 2 + 1, 2):
        while (number % i == 0):
            number /= i 
            loopForOthers += 1
        
        # Adding the number of times a prime divide a number
        numberDivisors = numberDivisors * (loopForOthers + 1)
        # Reseting count for next number
        loopForOthers = 0
        
    return numberDivisors

if __name__ == "__main__":

    divisors = int(input("\nPlease enter the number of divisors the trinagular number must have: "))
    tringularNumber = tringularNumbers(divisors)
    
    print("\nThe triangular number that has over {} divisors is : {}".format(divisors, tringularNumber))